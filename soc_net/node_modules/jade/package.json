{
  "name": "jade",
  "description": "Jade template engine",
  "version": "0.0.1",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "main": "./lib/jade.js",
  "bin": {
    "jade": "./bin/jade"
  },
  "engines": {
    "node": ">= 0.1.98"
  },
  "readme": "\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org).\n\n## Features\n\n  - high performance parser\n  - great readability\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (using the _!!! 5_ doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - no tag prefix\n  - filters\n    - :sass\n    - :markdown\n    - :cdata\n    - :javascript\n\n## Installation\n\nvia tarball or git:\n\n    make install\n\nvia npm:\n\n    npm install jade\n\nvia kiwi:\n\n\tkiwi install jade\n\n## Public API\n\n    var jade = require('jade');\n\n    // Render a string\n    jade.render('string of jade', { options: 'here' });\n\n    // Render a file\n    jade.renderFile('path/to/some.jade', { options: 'here' }, function(err, html){\n\t    // options are optional,\n\t    // the callback can be the second arg\n    });\n\n### Options\n\n - `scope`     Evaluation scope (`this`)\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required by `cache`\n - `cache`     Cache intermediate JavaScript in memory keyed by `filename`\n - `debug`     Outputs tokens and function body generated\n\n## Syntax\n\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n### Indentation\n\nJade is indentation based, however currently only supports a _2 space_ indent.\nWe may implement tab support in the future, until then use spaces, so make sure soft\ntabs are enabled in your editor.\n\n### Tags\n\nA tag is simply a leading word:\n\n    html\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n    div#container\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n    div.user-details\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n    div#foo.bar.baz\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n    #foo\n    .bar\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n    `<div id=\"foo\"></div><div class=\"bar\"></div>`\n\n### Tag Text\n\nSimply place some content after the tag:\n\n    p wahoo!\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n    p\n      | foo bar baz\n      | rawr rawr\n      | super cool\n      | go jade go\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ locals: { name: 'tj', email: 'tj@vision-media.ca' }}` to `render()`\nwe can do the following:\n\n    #user #{name} &lt;#{email}&gt;\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n    p \\#{something}\n\nnow we have `<p>#{something}</p>`\n\n### Nesting\n\n    ul\n      li one\n      li two\n      li three\n\nFucked up your whitespace? no worries, jade's error reporting should help you out.\nJade instruments the compiled JavaScript to provide meaningful context for runtime exceptions.\n\n    ul\n        li one\n      li two\n\n    Error: /Users/tj/Projects/jade/examples/layout.jade:2\n\t    1. 'ul'\n\t    2. '    li one'\n\n\tInvalid indentation, got 2 expected 1.\n\nNote: Trailing are generated on **EOS** if not present.\n\n### Attributes\n\nJade currently supports '(' and ')' as attribute delimiters.\n\n    a(href='/login', title='View login page') Login\n\nAlternatively we may use the colon to separate pairs:\n\n    a(href: '/login', title: 'View login page') Login\n\nBoolean attributes are also supported:\n\n    input(type=\"checkbox\", checked)\n\nBoolean attributes with code will only output the attribute when `true`:\n\n\tinput(type=\"checkbox\", checked: someValue)\n    \nNote: Leading / trailing whitespace is _ignore_ for attr pairs.\n\n### Doctypes\n\nTo add a doctype simply use `!!!` followed by an optional value:\n\n    !!!\n\nWill output the _transitional_ doctype, however:\n\n    !!! 5\n\nWill output html 5's doctype. Below are the doctypes\ndefined by default, which can easily be extended:\n    var doctypes = exports.doctypes = {\n\t    '5': '<!DOCTYPE html>',\n\t    'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n\t    'default': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n\t    'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n\t    'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n\t    'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n\t    '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n\t    'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n\t    'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n\t};\n\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n    body\n      :markdown\n        | Woah! jade _and_ markdown, very **cool**\n        | we can even link to [stuff](http://google.com)\n\nRenders:\n\n       <body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n    - var foo = 'bar';\n\nThis can be used for conditionals, or iteration:\n\n    - for (var key in obj)\n      p= obj[key]\n\nDue to Jade's buffering techniques the following is valid as well:\n\n    - if (foo)\n      ul\n        li yay\n        li foo\n        li worked\n    - else\n      p shit! didnt work\n\nHell, even verbose interation:\n\n    - if (items.length)\n      ul\n        - items.forEach(function(item){\n\t      li= item\n\t    - })\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n    - var foo = 'bar'\n    = foo\n    h1= foo\n\nWhich outputs `bar<h1>bar<h1/>`. Code buffered by `=` is escaped \nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n    p!= aVarContainingMoreHTML\n\n## bin/jade\n\nOutput html to _stdout_:\n\n    jade examples/*.jade --pipe\n\nGenerate _examples/*.html_:\n\n    jade examples/*.jade\n\nPass options:\n\n    jade examples/layout.jade --options '{ locals: { title: \"foo\" }}'\n\nUsage info:\n\n\t\u001bUsage: jade [options] <path ...>\n\n\t\u001bOptions:\n\t  -o, --options STR   JavaScript options object passed\n\t  -p, --pipe          Output to stdout instead of PATH.html\n\t  -h, --help          Output help information\n\n",
  "readmeFilename": "Readme.md",
  "_id": "jade@0.0.1",
  "dist": {
    "shasum": "10154537d7a2761e058322000b15d56cb0f6cfef"
  },
  "_from": "jade@> = 0.0.1",
  "_resolved": "https://registry.npmjs.org/jade/-/jade-0.0.1.tgz"
}
